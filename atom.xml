<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[鲤鱼]]></title>
  <subtitle><![CDATA[like a dog,like a god]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://www.koily.com/"/>
  <updated>2015-11-07T01:07:30.000Z</updated>
  <id>http://www.koily.com/</id>
  
  <author>
    <name><![CDATA[鲤鱼]]></name>
    <email><![CDATA[lyh472617147@icloud.com]]></email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[babel 6.0改动]]></title>
    <link href="http://www.koily.com/2015-11/07/babel-update/"/>
    <id>http://www.koily.com/2015-11/07/babel-update/</id>
    <published>2015-11-07T01:05:21.000Z</published>
    <updated>2015-11-07T01:07:30.000Z</updated>
    <content type="html"><![CDATA[<p>今天下午配置webpack config文件的时候,在引入babel-loader的时候遇见了jsx和es6无法转译的问题。结果发现是babel 5.x =&gt;babel 6.x的改动导致。</p>
<a id="more"></a>
<p>babel 6.0如同React一样(React在0.14版本中将React和ReactDOM分离成了不同模块),将自身分解成了各个模块。</p>
<ul>
<li>babel-preset-es2015,</li>
<li>babel-preset-react,</li>
<li>babel-preset-stage-4</li>
</ul>
<p>这导致在5.x版本中的配置需要有略微改变。<br>webpack引入5.xbabel如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">module: &#123;&#10;    //&#21152;&#36733;&#22120;&#10;    &#123;&#10;      test: /\.jsx|js$/,&#10;      loader: &#39;babel&#39;,&#10;      include: __dirname,&#10;      exclude: /node_modules/&#10;    &#125;]  &#10;  &#125;</span><br></pre></td></tr></table></figure></p>
<p>babel 6.x<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">module: &#123;&#10;  //&#21152;&#36733;&#22120;&#10;  loaders: [&#123;&#10;    test: /\.jsx|js$/,&#10;    loader: &#39;babel&#39;,&#10;    query: &#123;&#10;      presets: [&#39;es2015&#39;,&#39;react&#39;]&#10;    &#125;,&#10;    include: __dirname,&#10;    exclude: /node_modules/&#10;  &#125;]  &#10;&#125;</span><br></pre></td></tr></table></figure></p>
<p><a href="https://medium.com/@malyw/how-to-update-babel-5-x-6-x-d828c230ec53" target="_blank" rel="external">这里</a>讲的比较详细</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>今天下午配置webpack config文件的时候,在引入babel-loader的时候遇见了jsx和es6无法转译的问题。结果发现是babel 5.x =&gt;babel 6.x的改动导致。</p>]]>
    
    </summary>
    
      <category term="前端" scheme="http://www.koily.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[初级源码阅读]]></title>
    <link href="http://www.koily.com/2015-07/01/source-read/"/>
    <id>http://www.koily.com/2015-07/01/source-read/</id>
    <published>2015-06-30T16:00:00.000Z</published>
    <updated>2015-10-05T17:30:12.000Z</updated>
    <content type="html"><![CDATA[<p>阅读源码是每个新手成长过程中必须经历的,通过学习高手的代码,理解其中的思想和思维方式,从而提高自己对代码的架构能力。</p>
<a id="more"></a>
<ul>
<li>从适当的顺序入手</li>
</ul>
<p><code>backbone</code> <code>angular</code>这种可以划分成modle,router,view几个模块进行阅读</p>
<p><code>Jquery</code>,<code>underscore</code>这种可以从入口函数开始,逐个函数阅读</p>
<ul>
<li>适当忽略细节</li>
</ul>
<p>过分在意细节实现,会导致把握不住作者的整体架构</p>
<p>细节实现可以在熟悉框架整体架构后细细品味</p>
<ul>
<li>做笔记</li>
</ul>
<p>有些框架由于代码量大,函数嵌套引用,阅读者记不住函数的函数的功能,这时候需要记下自己能看懂的关键点,方便阅读和理解</p>
<ul>
<li>反复阅读</li>
</ul>
<p>随编程能力的提升,对源码可能有了更深的理解。以前不懂的地方或许能看懂了。这需要阅读者隔一段时间反复阅读源码</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>阅读源码是每个新手成长过程中必须经历的,通过学习高手的代码,理解其中的思想和思维方式,从而提高自己对代码的架构能力。</p>]]>
    
    </summary>
    
      <category term="源码阅读" scheme="http://www.koily.com/tags/%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[gulp的使用,前端开发逼格的飞升]]></title>
    <link href="http://www.koily.com/2015-04/10/gulp/"/>
    <id>http://www.koily.com/2015-04/10/gulp/</id>
    <published>2015-04-09T16:00:00.000Z</published>
    <updated>2015-10-05T04:12:27.000Z</updated>
    <content type="html"><![CDATA[<p>grunt的配置文件真是看得我头晕目眩,相比而言,gulp的API类似于unix的管道,一种熟悉的味道。</p>
<p>大型项目的开发,前端流程化管理工具必不可少,gulp在此学习一下。</p>
<a id="more"></a>
<p><strong>提前准备</strong></p>
<p>gulp是基于node的流程化管理工具,所以需要提前安装node。<br>1.<code>npm</code> 安装gulp和gulp的插件。<br>2.在项目中新建<code>gulpfile.js</code>文件,配置gulp。<br><strong>gulp常用API</strong></p>
<p>1.<code>gulp.task</code>制定任务</p>
<pre><code>gulp.task(<span class="string">'default'</span>,<span class="function"><span class="keyword">function</span><span class="params">()</span></span>{

})<span class="comment">//制定默认任务,运行gulp命令会执行默认任务</span>
</code></pre><p>接受两个参数 任务名和任务函数。</p>
<pre><code>gulp.task(<span class="string">'liyu'</span>,[<span class="string">'qingting'</span>],<span class="function"><span class="keyword">function</span><span class="params">()</span></span>{
    <span class="comment">//这代表liyu任务依赖于qingting任务执行,所以会优先执行qingting任务再执行liyu任务</span>
})
</code></pre><p>2.<code>gulp.pipe</code>类似于Unix的管道,将执行的程序往下传递.</p>
<p>3.<code>gulp.src</code>读取源文件</p>
<pre><code>gulp.task(<span class="string">'js'</span>,<span class="function"><span class="keyword">function</span><span class="params">()</span></span>{
    <span class="keyword">return</span> gulp.src(<span class="string">'js/*.js'</span>)<span class="comment">//读取js文件夹下的以.js结尾的文件</span>
    .pipe(uglify())<span class="comment">//引入插件uglify压缩代码</span>
    .pipe(gulp.dest(<span class="string">'build'</span>));<span class="comment">//生成的文件在根目录下的build.js</span>
});
</code></pre><p>读取的源文件可以是字符串地址,也可以是数组,支持正则表达式</p>
<p>4.<code>gulp.dest</code>生成文件指定的地址</p>
<p>5.<code>gulp.watch</code>指定需要监视的文件</p>
<pre><code>gulp.task(<span class="string">'watch'</span>,<span class="function"><span class="keyword">function</span><span class="params">()</span></span>{
    gulp.watch(<span class="string">'templates/*.ejs'</span>,[<span class="string">'build'</span>]);
});<span class="comment">//templates目录下的ejs模板文件发生改变则执行build任务</span>
</code></pre><p>接受两个参数 监视的文件 文件改变执行的任务<br>watch方法还能触发change事件</p>
<pre><code><span class="keyword">var</span> watcher = gulp.watch(<span class="string">'templates/*.ejs'</span>,[<span class="string">'build'</span>]);
watcher.on(<span class="string">'change'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>{
    <span class="built_in">console</span>.log(<span class="string">'Event path '</span> + event.path);<span class="comment">//改变的文件的路径</span>
    <span class="built_in">console</span>.log(<span class="string">'Event type'</span> + event.type);<span class="comment">//改变时间类型changed,delete,added事件类型</span>
    <span class="built_in">console</span>.log(<span class="string">'模板文件发生了改变'</span>);
})
</code></pre><p><strong>常用gulp插件</strong></p>
<p>1.<code>gulp-uglify</code> 压缩js代码<br>2.<code>jshint</code> 检测jst代码中的错误和潜在问题</p>
<pre><code>gulp.task(<span class="string">'js'</span>,function(){
    <span class="keyword">return</span> gulp.src(<span class="string">'js/*.js'</span>)
    .<span class="keyword">pipe</span>(jshint())
    .<span class="keyword">pipe</span>(jshint.reporter(<span class="string">'default'</span>))//jsshint出错时会打印
    .<span class="keyword">pipe</span>(uglify())
    .<span class="keyword">pipe</span>(concat(<span class="string">'app.js'</span>))
    .<span class="keyword">pipe</span>(gulp.dest(<span class="string">'build'</span>));
})
</code></pre><p>3.<code>gulp-concat</code> 代码合并<br>4.<code>gulp-less</code> 编译less<br>5.<code>gulp-load-plugins</code> 自动从package.json中加载gulp插件到一个对象上,加载的插件使用驼峰命名法</p>
<pre><code>var gulp = <span class="keyword">require</span>(<span class="string">'gulp'</span>),
gulpLoadPlugins = <span class="keyword">require</span>(<span class="string">'gulp-load-plugins'</span>),
plugins = gulpLoadPlugins();
gulp.task(<span class="string">'js'</span>, function () {
       <span class="keyword">return</span> gulp.src(<span class="string">'js/*.js'</span>)
          .<span class="keyword">pipe</span>(plugins.jshint())
          .<span class="keyword">pipe</span>(plugins.jshint.reporter(<span class="string">'default'</span>))
          .<span class="keyword">pipe</span>(plugins.uglify())
          .<span class="keyword">pipe</span>(plugins.concat(<span class="string">'app.js'</span>))
          .<span class="keyword">pipe</span>(gulp.dest(<span class="string">'build'</span>));
});
</code></pre><p>6.<code>gulp-livereload</code> 文件修改时,自动更新网页,配合watch一起使用<br>7.<code>broserSync</code> 在代码修改的时候不会刷新页面,而是直接加在浏览器的css样式里面,在编写单页应用的时候这个功能非常有效<br>8.<code>gulp-react</code> 貌似是把jsx编译成js的插件<br>9.<code>gulp-minify-css</code> 压缩css<br>10.<code>gulp-bower</code> 执行bower命令<br>11.<code>gulp-autoprefixer</code>自动补全前缀<br>12.<code>gulp-rename</code>重命名文件<br>13.<code>gulp-nodemon</code> 执行node命令</p>
<p>更多插件,请戳<a href="http://gulpjs.com/plugins/" target="_blank" rel="external">这里</a></p>
<hr>
<p>the end</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>grunt的配置文件真是看得我头晕目眩,相比而言,gulp的API类似于unix的管道,一种熟悉的味道。</p>
<p>大型项目的开发,前端流程化管理工具必不可少,gulp在此学习一下。</p>]]>
    
    </summary>
    
      <category term="web前端" scheme="http://www.koily.com/tags/web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="工具" scheme="http://www.koily.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[阿里前端面试知识点总结]]></title>
    <link href="http://www.koily.com/2015-02/22/interview/"/>
    <id>http://www.koily.com/2015-02/22/interview/</id>
    <published>2015-02-22T03:50:00.000Z</published>
    <updated>2015-10-05T04:12:27.000Z</updated>
    <content type="html"><![CDATA[<p>简历已经投了 阿里,腾讯的内推,对自己还是没底。想着总不能坐以待毙,好歹复习一下知识点,巩固下前端知识,想必也是极好的。（：<br><a id="more"></a></p>
<p><strong>js的数据类型有哪些？</strong></p>
<p>简单数据类型:String Number Boolean Null Undefind</p>
<p>复杂数据类型: Object</p>
<p>所有对象派生自Object,Undefind类型只有一个值undefind,Null类型只有一个值null。未定义或者定义未赋值的变量,对其进行<code>typeof</code>类型获取的时候,得到<code>undefind</code>。(有个坑爹的地方是<code>typeof null</code>竟然得到的答案是<strong>object</strong>,我理解为null为空对象的指针,所以对其进行typeof判断为object)</p>
<p><strong>undefind和null的异同？</strong></p>
<p>undefind值派生自null,所以<code>null==undefind</code>为true；</p>
<p>null是空指针,我理解为空对象指针,undefind连指针也没有,所以比较<code>null===undefind</code>为false。</p>
<p>还有个注意的地方是</p>
<pre><code><span class="built_in">Number</span>(<span class="literal">null</span>);<span class="comment">//结果是0</span>
<span class="built_in">Number</span>(undefind);<span class="comment">//结果是NaN</span>
</code></pre><p><strong>Json和javascript对象的异同,如何进行转换？</strong></p>
<p>Json是一种数据传输格式,是以字符串的形式。</p>
<p>Json对象是javascript对象的子集,Json对象没有方法,只有属性键值对。</p>
<p><strong>Json字符串转换为Json对象</strong>    </p>
<pre><code>var <span class="built_in">str</span> = '{<span class="string">"name"</span>:<span class="string">"koi"</span>}';
eval(<span class="string">"("</span>+<span class="built_in">str</span>+<span class="string">")"</span>);<span class="comment">//eval方法的弊端是：1.安全性问题。2.代码如果出错会导致程序崩溃并退出。3.全局变量污染        。</span>
JSON.parse(<span class="built_in">str</span>);<span class="comment">//安全的做法</span>
</code></pre><p><strong>Javscript对象转为Json字符串</strong></p>
<pre><code><span class="tag">JSON</span><span class="class">.stringify</span>(<span class="tag">o</span>);
</code></pre><p><strong>什么是闭包？</strong></p>
<p>内部函数访问到外部变量,反之外部函数无法获取到内部函数的变量,就是一个闭包。</p>
<p><strong>call和apply方法的区别</strong></p>
<p>call和apply都是javascript中函数对象的方法，都是改变函数执行的作用域</p>
<p>区别在于接受的参数格式不同，第一个参数都是指定函数执行的作用域，对于call()方法，传递给函数的参数必须逐一列举传入,apply()方法则是以数组的。</p>
<pre><code><span class="keyword">var</span> Man = <span class="function"><span class="keyword">function</span>(<span class="params">name,age</span>)</span>{    
    <span class="keyword">this</span>.name = name;
    <span class="keyword">this</span>.age = age;
};
<span class="keyword">var</span> you = <span class="keyword">new</span> Man(<span class="string">'koi'</span>,<span class="number">22</span>)    ;
<span class="keyword">var</span> show = <span class="function"><span class="keyword">function</span>(<span class="params">x,y</span>)</span>{    
    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name,<span class="keyword">this</span>.age);    
    <span class="built_in">console</span>.log(x,y);
};
show.call(you,<span class="string">"这是x"</span>,<span class="string">"这是y"</span>);<span class="comment">//逐一传入参数</span>
show.apply(you,[<span class="string">"这是x"</span>,<span class="string">"这是y"</span>]);<span class="comment">//以数组的形式传入参数</span>
</code></pre><p><strong>字符串操作的常见方法有哪些?</strong></p>
<p>略</p>
<p><strong>如何实现跨域,常见的方法有哪些?</strong></p>
<p>jsonp,iframe,还有HTML5的postmessage方法</p>
<p><strong>javascript声明提前</strong></p>
<pre><code><span class="keyword">var</span> b = <span class="string">"蜻蜓"</span>  
<span class="keyword">var</span> a = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{
    <span class="built_in">console</span>.log(b);
    <span class="keyword">var</span> b = <span class="string">"鲤鱼"</span>;
}<span class="comment">//会输出undefinde 因为b的声明在函数a中提前了。    </span>
</code></pre><p><strong>创建对象和对象的继承</strong></p>
<p style="color:red">字面量创建</p>

<pre><code><span class="keyword">var</span> person = {
    name:<span class="string">'鲤    鱼'</span>,
    age:<span class="number">22</span>,
    say: <span class="function"><span class="keyword">function</span>)</span>{
        <span class="built_in">console</span>.log(<span class="string">"like a dog,like a god"</span>);
    }
}
</code></pre><p style="color:red">工厂模式</p>

<pre><code><span class="keyword">var</span> Person = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{
    <span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>();
    obj.name  = <span class="string">"鲤鱼"</span>；
    obj.age = <span class="number">22</span>;
    <span class="keyword">return</span> obj;
}
<span class="keyword">var</span> man = Person();
</code></pre><p>工厂模式的弊端是无法判断对象的类型</p>
<p style="color:red">构造函数模式</p>        

<pre><code><span class="keyword">var</span> Person = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{
    <span class="keyword">this</span>.name = <span class="string">'鲤鱼'</span>;
    <span class="keyword">this</span>.age = <span class="number">22</span>,
    <span class="keyword">this</span>.say = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{
        <span class="built_in">console</span>.log(<span class="string">'like a dog,like a god'</span>);
    }
}
<span class="keyword">var</span> person = <span class="keyword">new</span> Person();            
</code></pre><p>需要注意的是这里的<code>new</code>只是语法糖,和java的<code>new</code>在本质上是不同的。</p>
<p style="color:red">原型链模式</p>

<pre><code><span class="keyword">var</span> Person = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{
};
Person.prototype = {
    name: <span class="string">"蜻蜓"</span>,
    say: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{
        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);
    }
}
</code></pre><p style="color:red">利用原型链实现继承</p>

<p>子类的原型指向父类的实例即课利用js的原型机制实现对象的继承。</p>
<p>弊端:<br>没法向父类的构造函数中传入参数</p>
<p style="color:red">构造函数实现继承</p>

<p>利用call或者apply方法改变父类构造函数执行环境并传入参数</p>
<p>弊端:<br>方法定义在了构造函数里面,造成了额内存的浪费</p>
<p style="color:red">组合式继承</p>

<p>结合apply函数和原型链实现继承</p>
<p>弊端:<br>1.构造函数执行了两次(new了一次,apply了一次)<br>2.子类的prototype上有父类的多余属性</p>
<p style="color:red">组合寄生式</p>

<p>子类的原型不再指向父类的实例,而是object(Father.prototype).从而让子类的原型不含有多余属性,减少父类构造函数的使用次数。</p>
<p>普遍认为最完美的继承形式。</p>
<p><strong>蜂鸟招聘项目遇见的问题是什么</strong></p>
<p>1.由于产品经理需求变更频繁,产品和最初的设计图大相径庭,导致代码臃肿凌乱。</p>
<p>2.由于判断失误,没有采用angular或者backbone之类的框架,导致注入代码和dom操作在后期越来越凌乱,难以维护。</p>
<p>产品经理说凑合着用…但这是教训…以后一定会注意了.</p>
<p><strong>一叶书签遇见的问题</strong><br>1.做一个node爬虫功能的时候遇见编码问题</p>
<p>解决办法是先判断http头部的<code>content-type</code>,如果没有这个属性,再判断<code>meta</code>标签,但是这样感觉比较损耗性能,不过没想到更加好的解决办法了。</p>
<p>2.API接口重构</p>
<p>开始由于没有写API文档,导致后面接口风格规范不统一,对代码的维护和功能的扩展造成了一定的影响。后来采取先统一风格,写好API文档,统一JSON返回格式,再对所有接口进行的规范重构。<br>3.页面模块化结构的问题</p>
<p>因为缺乏前端架构的经验,没有使用模块化代码的方式,导致不同页面的相同部分代码高度重复,页面代码臃肿,使维护难度变大</p>
<p><strong>js数组去重方法</strong></p>
<p>最好的方式是利用hash来用空间换时间.遍历数组的时候对hash进行查找,没有的元素就存到新数组里面去。</p>
<pre><code><span class="built_in">Array</span>.prototype.unique = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{
    <span class="keyword">var</span> n = {},array = [];
    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i&lt;<span class="keyword">this</span>.length;i++){
        <span class="keyword">if</span> (!n[<span class="keyword">this</span>[i]]){<span class="comment">//如果hash表里没有,则存进数组里</span>
        n[[<span class="keyword">this</span>[i]]] = <span class="literal">true</span>;
        array.push(<span class="keyword">this</span>[i]);
        }
    }
    <span class="keyword">return</span> array;
}
</code></pre><p><strong>事件冒泡是什么,事件捕获又是什么？</strong></p>
<p style="color:red">事件冒泡</p>

<p>在一个对象上触发某类事件（比如onclick事件），如果此对象定义了此事件的处理程序，那么此事件就会调用这个处理程序，如果没有定义此事件处理程序或者事件返回true，那么这个事件会向这个对象的父级对象传播，从里到外，直至它被处理（父级对象所有同类事件都将被激活），或者它到达了对象层次的最顶层，即document对象（有些浏览器是window）。</p>
<p style="color:red">事件捕获</p>

<p>在不明白具体事件触发事件的目标对象,会先触发其父级对象,依次向下直到目标对象。最先触发事件捕获的对象时window对象。(由于老版本浏览器不支持,所以最好使用事件冒泡)</p>
<p><b>先发生事件冒泡——&gt;出于目标阶段——&gt;事件冒泡阶段<b></b></b></p>
<p><strong>两栏布局(自适应)如何实现</strong></p>
<p>1.假定左边定宽,右边采取负margin实现。<br>2.flexbox实现<br>3.table-ceil</p>
<p><strong>事件委托是什么？</strong></p>
<p>利用事件冒泡或者事件捕获来获取事件来将子元素的事件绑定在父元素上。从而提高性能。</p>
<p><strong>backbone和angular对比的优缺点是什么</strong></p>
<p>backbone相对于angular轻量级,angular相对笨重一些。</p>
<p>backbone的mvc有一定问题,逻辑控制写在view中,并没有独立的c,只有router</p>
<p><strong>简要谈谈mvvm和mvc的区别</strong></p>
<p>在MVC中，C是用来拦截请来绑定事件，然后通过C手动同步V与M。 在MVVC中，绑定事件等交互是在V中通过添加一些绑定属性实现，虽然这些事件回调是定义在VM中。另一个最大的不同是 VM与V是双向绑定的，全智能维护各种状态，并且VM会自动同步M</p>
<hr>
<p>2015.3.22<br><!--阿里实习offer已拿--><br>End.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>简历已经投了 阿里,腾讯的内推,对自己还是没底。想着总不能坐以待毙,好歹复习一下知识点,巩固下前端知识,想必也是极好的。（：<br>]]>
    
    </summary>
    
      <category term="javascript" scheme="http://www.koily.com/tags/javascript/"/>
    
      <category term="前端" scheme="http://www.koily.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="面试" scheme="http://www.koily.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[web前端框架——React]]></title>
    <link href="http://www.koily.com/2015-02/10/react-study/"/>
    <id>http://www.koily.com/2015-02/10/react-study/</id>
    <published>2015-02-09T16:00:00.000Z</published>
    <updated>2015-10-05T17:29:49.000Z</updated>
    <content type="html"><![CDATA[<p><strong>facebook</strong>推出了前端组件化 javascript框架——<a href="http://facebook.github.io/react/index.html" target="_blank" rel="external">React</a>,又闻react native在 <strong>ios</strong>端 解决了 html 书写 view 的性能问题。对<code>React</code>更加有兴趣,所以初步学习了下。<br><a id="more"></a></p>
<h2 id="JSX">JSX</h2><p>jsx是react推荐使用的语法,所以在学习react之前,首先要了解jsx</p>
<ul>
<li>什么是<code>jsx</code>?<br>jsx是是一种用<code>xml</code>实现javascript的语法糖,使用jsx的方法有两种:</li>
</ul>
<p>1.在html中引入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#60;script type=text/javascript src=JSXTransformer.js&#62;&#60;/script&#62;&#10;&#60;script type=text/jsx src=yourscript&#62;&#60;/script&#62;</span><br></pre></td></tr></table></figure></p>
<p>注意<code>type=text/jsx</code>属性 引入的js文件不会直接执行,而是会被当做<code>jsx</code>字符串由<code>JSXTransformer.js</code>处理后执行。这在生产环境中会导致性能问题,所以在产品正式发布的时候推荐采用第二种做法。</p>
<p>2.通过<code>npm install -g react-tools</code>安装<code>jsx</code>转换工具 键入命令<code>jsx --watch /</code>来监测，自动生成转换后的js代码。<br>这里就不深入了解jsx了,react才是我们的重点。</p>
<h2 id="Component">Component</h2><p>component是react的核心内容,一切的复用是围绕着component展开的。<br>react中创建一个component:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var Demo = React.createClass(&#123;&#10;&#9;//&#24517;&#39035;&#21547;&#26377;render&#26041;&#27861;,&#21542;&#21017;&#20250;&#25253;&#38169;!&#10;&#9;render: function()&#123;&#10;&#9;&#9;return (&#10;&#9;&#9;&#9;&#60;p className=&#34;test&#34;&#62;this is a test!&#60;/p&#62;//jsx&#20013;class&#20026;className&#10;&#9;&#9;)&#10;&#9;&#125;&#10;&#125;)</span><br></pre></td></tr></table></figure></p>
<p><strong>组件的命名首字母必须大写,否则会报错</strong></p>
<p>然后调用<code>React.render</code>方法渲染<code>DOM</code>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">React.render(&#60;Demo/&#62;,document.querySelector(&#39;div&#39;));</span><br></pre></td></tr></table></figure></p>
<p>react最简单的使用就是这样。接下来详细介绍各个常用的函数使用。</p>
<ul>
<li><strong>props</strong>——组件属性<br>不同环境下,相同组件可能拥有不同的属性。对此,在初始化组件的时候可以传入props属性,通过<code>this.props</code>来获取,代码如下:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var Comment = React.createClass(&#123;&#10;&#9;render: function()&#123;&#10;&#9;return (&#10;&#9;&#9;&#60;div className=&#34;propsTest&#34;&#62;&#10;&#9;&#9;&#9;&#60;p&#62;hello,&#123;this.props.name&#125;!&#60;/p&#62;&#10;&#9;&#9;&#9;&#60;img src=&#123;this.props.src&#125;/&#62;&#10;&#9;&#9;&#60;/div&#62;&#10;&#9;)&#125;&#10;&#125;);&#10;//&#21021;&#22987;&#21270;Comment&#30340;&#26102;&#20505;&#20256;&#20837;name,src&#23646;&#24615;&#10;React.render(&#60;Comment name=&#39;koi&#39; src=&#39;imgUrl&#39;/&#62;,document.querySelector(&#39;div&#39;));</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>props还可以从父级组件中<br>需要注意的一点是<strong>props在初始化组件后就是不可变的</strong>这会和后面讲到的<code>state</code>有所区分。</p>
<ul>
<li><strong>state</strong>——状态变量<br>由于有些组件在渲染后不可能保持不变,所以react引入了<code>state</code>来表示组件内部的状态。<br>通过<code>getInitialState</code>方法来初始化组件私有的state,在组件加载完成后我们可以通过<code>this.state</code>来直接获取state值,通过<code>setState</code>来更改state值。代码如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var APP = React.createClass(&#123;&#10;    getInitialState: function()&#123;&#10;        return &#123;&#10;            content: &#34;this is state&#34;,&#10;            inputNumber: 0&#10;        &#125;&#10;    &#125;,&#10;    update: function(e)&#123;&#10;        this.setState(&#123;inputNumber:+this.state.inputNumber+1&#125;);&#10;        this.setState(&#123;content:e.target.value&#125;);&#10;    &#125;,&#10;    render: function()&#123;&#10;        return (&#10;            &#60;div className=&#34;example&#34;&#62;&#10;                &#60;input type=&#34;text&#34; onChange=&#123;this.update&#125;/&#62;&#10;                    &#60;p&#62;&#123;this.state.content&#125;&#60;/p&#62;&#10;                    &#60;p&#62;&#26356;&#26032;&#27425;&#25968;&#20026;&#123;this.state.inputNumber&#125;&#60;/p&#62;&#10;            &#60;/div&#62;&#10;                )&#10;            &#125;&#10;&#125;);&#10;&#10;React.render(&#10;    &#60;APP  content=&#34;props&#21021;&#22987;&#21270;&#21518;&#19968;&#33324;&#26159;&#19981;&#25913;&#21464;&#30340;&#34;/&#62;,&#10;    document.getElementById(&#39;content&#39;)&#10;    );</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p><strong>state的每次更新都会引起 component 的刷新</strong></p>
<p>值得注意的是state中的值都是字符串的形式存储的,所以获取类型要进行类型转换。<br>以上代码中对 onChange 事件进行绑定传入的对象<code>e</code>为javascript事件对象</p>
<h2 id="Lifetime">Lifetime</h2><p>理解react的生命周期可以使用react的高级功能。<br>react的在生命周期对应的回调函数可以对dom进行批量操作,因为对dom的操作代价是很高的,所以批量操作可以提高react的响应速度。</p>
<hr>
<p>未完待续</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><strong>facebook</strong>推出了前端组件化 javascript框架——<a href="http://facebook.github.io/react/index.html">React</a>,又闻react native在 <strong>ios</strong>端 解决了 html 书写 view 的性能问题。对<code>React</code>更加有兴趣,所以初步学习了下。<br>]]>
    
    </summary>
    
      <category term="javascript" scheme="http://www.koily.com/tags/javascript/"/>
    
      <category term="react" scheme="http://www.koily.com/tags/react/"/>
    
      <category term="web前端" scheme="http://www.koily.com/tags/web%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[故事的开始]]></title>
    <link href="http://www.koily.com/2015-01/31/new-way/"/>
    <id>http://www.koily.com/2015-01/31/new-way/</id>
    <published>2015-01-31T14:57:41.000Z</published>
    <updated>2015-10-05T17:24:48.000Z</updated>
    <content type="html"><![CDATA[<h3 id="拥有一个blog的想法">拥有一个blog的想法</h3><p>在查询资料的时候,进入别人的博客,每一个blog像是各自的家一样让人感到温馨。对技术的探讨,对生活琐碎的念叨,对时光荏苒的不舍。</p>
<p>是该有个家了。<br><a id="more"></a><br>恰逢去年今日,开始学习第一门编程语言<code>Java</code>。</p>
<p>为了拯救我那退化的表达能力,自言自语,碎碎念也罢。</p>
<p>于此有了这个blog。</p>
<p>blog从 <a href="http://www.ghostchina.com/" target="_blank" rel="external"><code>ghost</code></a> 到 <a href="http://airpub.io/" target="_blank" rel="external"><code>airpub</code></a> 再到 <a href="http://hexo.io/" target="_blank" rel="external"><code>hexo</code></a>,尝试了不少,终于成了现在所见的样子</p>
<p>在此感谢 热爱大海与冷笑话的 <a href="http://litten.github.io/" target="_blank" rel="external">黎小腾君</a> 非常漂亮的blog主题 <a href="https://github.com/litten/hexo-theme-yilia" target="_blank" rel="external"><code>yilia</code></a></p>
<hr>
<p>我初入编程给我耐心指路的前辈 <a href="http://jerryzou.com/" target="_blank" rel="external">邹润阳</a> <a href="http://vinthony.me/" target="_blank" rel="external">寸晓东</a> <a href="">杨坤生</a> <a href="http://www.marksaas.com/" target="_blank" rel="external">王奎</a> </p>
<p>你们让我喜欢了这条路同时给予了我极大的帮助。</p>
<p>这将是一个新的开始。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="拥有一个blog的想法">拥有一个blog的想法</h3><p>在查询资料的时候,进入别人的博客,每一个blog像是各自的家一样让人感到温馨。对技术的探讨,对生活琐碎的念叨,对时光荏苒的不舍。</p>
<p>是该有个家了。<br>]]>
    
    </summary>
    
      <category term="不语" scheme="http://www.koily.com/tags/%E4%B8%8D%E8%AF%AD/"/>
    
      <category term="惊蛰" scheme="http://www.koily.com/tags/%E6%83%8A%E8%9B%B0/"/>
    
  </entry>
  
</feed>
